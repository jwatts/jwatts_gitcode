/* ***** AF Release 1.0.0 SQL Script to create database ***** */  
 
/* ***** DROP VIEWS IF EXIST ***** */ 

/* ***** DROP TABLES IF EXIST ***** */

/* SET FOREIGN_KEY_CHECKS = 0; */

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AF_BLLTN_MSG';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AF_USER';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

/* SET FOREIGN_KEY_CHECKS = 1; */

/* ***** CREATE REFERENCE TABLES ***** */

/* ***** CREATE TABLES ***** */

CREATE TABLE AF_BLLTN_MSG (
  BLLTIN_M_ID number(10) NOT NULL,
  BLLTIN_M_VAL varchar2(4000) NOT NULL,
  BLLTIN_M_CRT_DT timestamp(0) DEFAULT SYSTIMESTAMP NOT NULL,
  BLLTIN_M_CRT_USR varchar2(50) NOT NULL,
  BLLTIN_M_STRT_DT timestamp(0) NOT NULL,
  BLLTIN_M_END_DT timestamp(0) NOT NULL,
  BLLTIN_M_LST_MOD_DT timestamp(0) DEFAULT NULL,
  BLLTIN_M_LST_MOD_USR varchar2(50) DEFAULT NULL,
  PRIMARY KEY (BLLTIN_M_ID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE AF_BLLTN_MSG_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AF_BLLTN_MSG_seq_tr
 BEFORE INSERT ON AF_BLLTN_MSG FOR EACH ROW
 WHEN (NEW.BLLTIN_M_ID IS NULL)
BEGIN
 SELECT AF_BLLTN_MSG_seq.NEXTVAL INTO :NEW.BLLTIN_M_ID FROM DUAL;
END;
/

CREATE TABLE AF_USER (
  USER_ID number(10) NOT NULL,
  APPIAN_USERNAME varchar2(255) DEFAULT NULL,
  USER_FIRST_NAME varchar2(255) DEFAULT NULL,
  USER_MIDDLE_NAME varchar2(255) DEFAULT NULL,
  USER_LAST_NAME varchar2(255) DEFAULT NULL,
  USER_EMAIL varchar2(255) DEFAULT NULL,
  USER_OFFICE_PHONE varchar2(255) DEFAULT NULL,
  USER_MOBILE_PHONE varchar2(255) DEFAULT NULL,
  USER_HOME_PHONE varchar2(255) DEFAULT NULL,
  USER_ADDR1 varchar2(255) DEFAULT NULL,
  USER_ADDR2 varchar2(255) DEFAULT NULL,
  USER_ADDR3 varchar2(255) DEFAULT NULL,
  USER_CITY varchar2(255) DEFAULT NULL,
  USER_STATE varchar2(255) DEFAULT NULL,
  USER_ZIP varchar2(255) DEFAULT NULL,
  PRIMARY KEY (USER_ID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE AF_USER_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AF_USER_seq_tr
 BEFORE INSERT ON AF_USER FOR EACH ROW
 WHEN (NEW.USER_ID IS NULL)
BEGIN
 SELECT AF_USER_seq.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

/* ***** UPDATE TABLES WITH CONSTRAINTS ***** */ 

/* ***** CREATE VIEWS ***** */