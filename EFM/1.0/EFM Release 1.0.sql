
CREATE TABLE EFM_EXPENSE (
  EXP_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_ID int(11) NOT NULL,
  MAINT_ID int(11) DEFAULT NULL,
  TRIP_ID int(11) DEFAULT NULL,
  VEH_USAGE_ID int(11) DEFAULT NULL,
  VEH_INC_ID int(11) DEFAULT NULL,
  EXP_CATEGORY_ID int(11) NOT NULL,
  EXP_DATE date DEFAULT NULL,
  EXP_AMOUNT double(11,2) DEFAULT NULL,
  EXP_COMMENTS varchar(1000) DEFAULT NULL,
  CREATED_BY varchar(255) DEFAULT NULL,
  CREATED_DATETIME datetime DEFAULT NULL,
  MODIFIED_BY varchar(255) DEFAULT NULL,
  MODIFIED_DATETIME datetime DEFAULT NULL,
  PRIMARY KEY (EXP_ID)
) ;


CREATE TABLE EFM_FLEET (
  FLEET_ID int(11) NOT NULL AUTO_INCREMENT,
  FLEET_NAME varchar(255) NOT NULL,
  PRIMARY KEY (FLEET_ID)
) ;

CREATE TABLE EFM_HTW_EXPENSES (
  EXPENSE_ID int(11) NOT NULL AUTO_INCREMENT,
  TYPE_NM varchar(255) NOT NULL,
  VEH_ID int(11) NOT NULL,
  AMOUNT decimal(10,0) NOT NULL,
  EXPENSE_DT datetime NOT NULL,
  TRIP_ID int(11) NOT NULL,
  USER_ID int(11) NOT NULL,
  COMMENTS varchar(2000) NOT NULL,
  PRIMARY KEY (EXPENSE_ID)
) ;

CREATE TABLE EFM_INCIDENT (
  INC_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_ID int(11) NOT NULL,
  INC_DATE date DEFAULT NULL,
  INC_CATEGORY_ID int(11) NOT NULL,
  INC_DESCRIPTION varchar(4000) DEFAULT NULL,
  CREATED_BY varchar(255) DEFAULT NULL,
  CREATED_DATETIME datetime DEFAULT NULL,
  MODIFIED_BY varchar(255) DEFAULT NULL,
  MODIFIED_DATETIME datetime DEFAULT NULL,
  PRIMARY KEY (INC_ID)
) ;

CREATE TABLE EFM_LOCATION (
  LOC_ID int(11) NOT NULL AUTO_INCREMENT,
  LOC_NM varchar(255) NOT NULL,
  LOC_ADDR varchar(255) NOT NULL,
  LOC_DESC varchar(255) NOT NULL,
  PRIMARY KEY (LOC_ID)
) ;

CREATE TABLE EFM_MAINTENANCE_LOG (
  MAINT_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_ID int(11) NOT NULL,
  MAINT_IS_SCHEDULED tinyint(1) DEFAULT NULL,
  MAINT_CHECK_IN_DT datetime DEFAULT NULL,
  MAINT_CHECK_OUT_DT datetime DEFAULT NULL,
  MAINT_START_DT date DEFAULT NULL,
  MAINT_END_DT date DEFAULT NULL,
  MAINT_COMPLETED_BY varchar(255) DEFAULT NULL,
  MAINT_CATEGORY_ID int(11) DEFAULT NULL,
  MAINT_COMMENTS varchar(4000) DEFAULT NULL,
  CREATED_BY varchar(255) DEFAULT NULL,
  CREATED_DATETIME datetime DEFAULT NULL,
  MODIFIED_BY varchar(255) DEFAULT NULL,
  MODIFIED_DATETIME datetime DEFAULT NULL,
  PRIMARY KEY (MAINT_ID)
) ;

CREATE TABLE EFM_R_EVENT_CATEGORY (
  EVENT_CATEGORY_ID int(11) NOT NULL,
  EVENT_TYPE_ID int(11) NOT NULL,
  EVENT_CATEGORY_DESC varchar(255) DEFAULT NULL,
  PRIMARY KEY (EVENT_CATEGORY_ID)
) ;

CREATE TABLE EFM_R_EVENT_TYPES (
  EVENT_TYPE_ID int(11) NOT NULL,
  EVENT_TYPE_DESC varchar(255) DEFAULT NULL,
  PRIMARY KEY (EVENT_TYPE_ID)
) ;

CREATE TABLE EFM_R_EXP_CATEGORY (
  EXP_CATEGORY_ID int(11) NOT NULL,
  EXP_CATEGORY_DESC varchar(255) DEFAULT NULL,
  PRIMARY KEY (EXP_CATEGORY_ID)
) ;

CREATE TABLE EFM_R_VEH_STATUS (
  VEH_STATUS_ID int(11) NOT NULL,
  VEH_STATUS_DESC varchar(255) DEFAULT NULL,
  VEH_STATUS_VEHICLE_ACTIVE_FLG tinyint(1) DEFAULT NULL,
  PRIMARY KEY (VEH_STATUS_ID)
) ;

CREATE TABLE EFM_R_VEH_TYPE (
  VEC_TYPE_ID int(11) NOT NULL,
  VEC_TYPE_DESC varchar(255) DEFAULT NULL,
  PRIMARY KEY (VEC_TYPE_ID)
) ;

CREATE TABLE EFM_TRIP (
  TRIP_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_ID int(11) NOT NULL,
  USER_ID int(11) NOT NULL,
  TRIP_MILEAGE decimal(10,0) NOT NULL,
  TO_LOC_ID int(11) NOT NULL,
  FROM_LOC_ID int(11) NOT NULL,
  TRIP_DT datetime NOT NULL,
  TRIP_START_DT date DEFAULT NULL,
  TRIP_END_DT date DEFAULT NULL,
  PRIMARY KEY (TRIP_ID)
) ;

CREATE TABLE EFM_USER (
  USER_ID int(11) NOT NULL AUTO_INCREMENT,
  USER_FN varchar(255) NOT NULL,
  USER_LN varchar(255) NOT NULL,
  USER_NM varchar(255) NOT NULL,
  PRIMARY KEY (USER_ID)
) ;

CREATE TABLE EFM_VEHICLE (
  VEH_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_MAKE varchar(25) DEFAULT NULL,
  VEH_MODEL varchar(50) DEFAULT NULL,
  VEH_YEAR int(4) DEFAULT NULL,
  VEH_STATUS_ID int(11) NOT NULL,
  FLEET_ID int(11) NOT NULL,
  VEH_INITIAL_MILEAGE double(10,1) DEFAULT NULL,
  VEH_MILEAGE double(10,1) DEFAULT NULL,
  VEH_STATE varchar(20) DEFAULT NULL,
  VEH_PLATE varchar(20) DEFAULT NULL,
  VEH_NEXT_MAINT_DT date DEFAULT NULL,
  VEH_NEXT_MAINT_MILEAGE double(10,1) DEFAULT NULL,
  VEH_TYPE_ID int(11) NOT NULL,
  VEH_VIN varchar(255) DEFAULT NULL,
  VEH_IMG int(11) DEFAULT NULL,
  VEH_FLDR_ID int(11) DEFAULT NULL,
  VEHICLE_ACTIVE_FLG tinyint(1) DEFAULT NULL,
  CREATED_BY varchar(255) DEFAULT NULL,
  CREATED_DATETIME datetime DEFAULT NULL,
  MODIFIED_BY varchar(255) DEFAULT NULL,
  MODIFIED_DATETIME datetime DEFAULT NULL,
  PRIMARY KEY (VEH_ID)
) ;

CREATE TABLE EFM_VEHICLE_USAGE (
  USAGE_ID int(11) NOT NULL AUTO_INCREMENT,
  VEH_ID int(11) NOT NULL,
  USAGE_CHECK_OUT_DT datetime DEFAULT NULL,
  USAGE_CHECK_IN_DT datetime DEFAULT NULL,
  USAGE_GALLONS double(10,2) DEFAULT NULL,
  USAGE_MILEAGE double(10,1) DEFAULT NULL,
  USAGE_COST double(10,2) DEFAULT NULL,
  CREATED_BY varchar(255) DEFAULT NULL,
  CREATED_DATETIME datetime DEFAULT NULL,
  MODIFIED_BY varchar(255) DEFAULT NULL,
  MODIFIED_DATETIME datetime DEFAULT NULL,
  PRIMARY KEY (USAGE_ID)
) ;



INSERT INTO EFM_FLEET (FLEET_ID, FLEET_NAME) VALUES
(1, 'Headquarters'),
(2, 'Northern Virginia'),
(3, 'Southwestern Maryland');

INSERT INTO EFM_HTW_EXPENSES (EXPENSE_ID, TYPE_NM, VEH_ID, AMOUNT, EXPENSE_DT, TRIP_ID, USER_ID, COMMENTS) VALUES
(1, 'Gas', 1, '234', '2016-06-28 18:40:57', 1, 1, 'Gas'),
(2, 'Gas', 1, '25', '2016-06-28 18:58:42', 1, 1, 'Gas from trip to Pennsylvania'),
(3, 'Tolls', 1, '12', '2016-06-28 19:04:53', 1, 1, 'Tolls for travel through New York'),
(4, 'Parking', 1, '20', '2016-07-06 21:11:35', 1, 1, 'Parking garage fees');


INSERT INTO EFM_LOCATION (LOC_ID, LOC_NM, LOC_ADDR, LOC_DESC) VALUES
(1, 'Office of Professional Responsibility', '1320 Random Hills Road Suite 500\r\nFairfax, VA, 22030', ''),
(2, 'Washington Field Office', '2675 Prosperity Avenue 3rd Floor\r\nFairfax, VA, 20598-5216', ''),
(3, 'SAC Washington, DC\r\nHomeland Security Investigations', '2675 Prosperity Ave\r\nFairfax, VA, 22031', ''),
(5, 'Home', '', 'Generic Home Location for users');

INSERT INTO EFM_R_EVENT_CATEGORY (EVENT_CATEGORY_ID, EVENT_TYPE_ID, EVENT_CATEGORY_DESC) VALUES
(1, 1, '90-Day Inspection'),
(2, 1, '10k Mileage Maintenance'),
(3, 1, 'Annual Maintenance'),
(4, 2, 'Accident'),
(5, 2, 'Property Damage'),
(6, 2, 'Traffic Violation'),
(7, 2, 'Theft'),
(8, 2, 'Other');

INSERT INTO EFM_R_EVENT_TYPES (EVENT_TYPE_ID, EVENT_TYPE_DESC) VALUES
(1, 'Maintenance'),
(2, 'Incident'),
(3, 'Usage'),
(4, 'Expense');

INSERT INTO EFM_R_EXP_CATEGORY (EXP_CATEGORY_ID, EXP_CATEGORY_DESC) VALUES
(1, 'Gas'),
(2, 'Repair'),
(3, 'Tires'),
(4, 'Oil'),
(5, 'Maintenance'),
(6, 'Other');

INSERT INTO EFM_R_VEH_STATUS (VEH_STATUS_ID, VEH_STATUS_DESC, VEH_STATUS_VEHICLE_ACTIVE_FLG) VALUES
(1, 'Available', 1),
(2, 'In Use', 1),
(3, 'Pending Maintenance', 0),
(4, 'Undergoing Maintenance', 0),
(5, 'Retired', 0);

INSERT INTO EFM_R_VEH_TYPE (VEC_TYPE_ID, VEC_TYPE_DESC) VALUES
(1, 'Car'),
(2, 'Truck'),
(3, 'SUV'),
(4, 'Van');

INSERT INTO EFM_TRIP (TRIP_ID, VEH_ID, USER_ID, TRIP_MILEAGE, TO_LOC_ID, FROM_LOC_ID, TRIP_DT, TRIP_START_DT, TRIP_END_DT) VALUES
(1, 1, 1, '62', 5, 2, '2016-06-12 16:42:41', NULL, NULL),
(4, 1, 1, '70', 2, 5, '2016-06-13 09:00:00', NULL, NULL),
(5, 1, 1, '65', 2, 5, '2016-06-12 08:28:00', NULL, NULL),
(6, 1, 1, '66', 5, 2, '2016-06-09 18:57:00', NULL, NULL),
(7, 1, 1, '65', 2, 5, '2016-06-09 08:19:00', NULL, NULL),
(8, 1, 1, '63', 2, 0, '2016-06-07 07:31:00', NULL, NULL),
(9, 1, 1, '65', 2, 0, '2016-06-06 08:38:00', NULL, NULL),
(10, 1, 1, '64', 2, 0, '2016-06-04 09:28:00', NULL, NULL),
(11, 1, 1, '65', 2, 0, '2016-06-03 07:50:00', NULL, NULL),
(12, 1, 1, '65', 2, 0, '2016-06-02 06:22:00', NULL, NULL),
(13, 1, 1, '72', 5, 2, '2016-06-13 17:51:46', NULL, NULL),
(23, 3, 1, '65', 5, 3, '2016-06-17 18:35:47', NULL, NULL),
(24, 1, 1, '56666', 2, 5, '2016-06-27 18:14:47', NULL, NULL),
(25, 1, 1, '100000', 2, 5, '2016-07-06 20:51:28', NULL, NULL),
(26, 3, 1, '0', 2, 2, '2016-07-08 19:58:47', NULL, NULL);

INSERT INTO EFM_USER (USER_ID, USER_FN, USER_LN, USER_NM) VALUES
(1, 'John', 'Doe', 'katie.hsu');



 
 
 
 
CREATE OR REPLACE VIEW EFM_V_LAST_MAINTENANCE_DETAILS AS(
SELECT
  veh.VEH_ID AS vehicleId,
  maint.MAINT_END_DT AS lastMaintDt,
  maint.MAINT_IS_SCHEDULED AS wasScheduled
FROM (Appian.EFM_VEHICLE veh
LEFT JOIN Appian.EFM_MAINTENANCE_LOG maint
  ON ((maint.VEH_ID = veh.VEH_ID)))
GROUP BY veh.VEH_ID
ORDER BY maint.MAINT_END_DT DESC
);


CREATE OR REPLACE VIEW EFM_V_MAINTENANCE_METRICS AS(
SELECT
  veh.VEH_ID AS vehicleId,
  lastMaint.lastMaintDt AS lastMaintDt,
  lastMaint.wasScheduled AS lastMaintScheduled,
  veh.VEH_NEXT_MAINT_DT AS nextMaintDt,
  veh.VEH_NEXT_MAINT_MILEAGE AS nextMaintMileage,
  ROUND(((1 - (SUM((to_days(maint.MAINT_CHECK_OUT_DT) - to_days(maint.MAINT_CHECK_IN_DT))) / (to_days(curdate()) - to_days(veh.CREATED_DATETIME)))) * 100), 2) AS uptimePct
FROM ((Appian.EFM_VEHICLE veh
LEFT JOIN Appian.EFM_V_LAST_MAINTENANCE_DETAILS lastMaint
  ON ((lastMaint.vehicleId = veh.VEH_ID)))
LEFT JOIN Appian.EFM_MAINTENANCE_LOG maint
  ON ((maint.VEH_ID = veh.VEH_ID)))
GROUP BY veh.VEH_ID
);


CREATE OR REPLACE VIEW EFM_V_USAGE_METRICS AS(
SELECT
  veh.VEH_ID AS VEH_ID,
  ROUND((((veh.VEH_MILEAGE - veh.VEH_INITIAL_MILEAGE) + 1) / (1 + SUM(usg.USAGE_GALLONS))), 2) AS AVG_MPG
FROM (Appian.EFM_VEHICLE veh
LEFT JOIN Appian.EFM_VEHICLE_USAGE usg
  ON ((usg.VEH_ID = veh.VEH_ID)))
GROUP BY veh.VEH_ID
);


CREATE OR REPLACE VIEW EFM_V_USER_TRIPS AS(
SELECT
  t.TRIP_ID AS TRIP_ID,
  concat(u.USER_FN, ' ', u.USER_LN) AS USER_DISPLAY_NM,
  u.USER_NM AS USER_NM,
  u.USER_ID AS USER_ID,
  t.TRIP_MILEAGE AS TRIP_MILEAGE,
  t.TRIP_DT AS TRIP_DT,
  tl.LOC_NM AS TO_LOC_NM,
  fl.LOC_NM AS FROM_LOC_NM,
  v.VEH_VIN AS VEH_VIN,
  fl.LOC_ID AS FROM_LOC_ID,
  tl.LOC_ID AS TO_LOC_ID,
  v.VEH_ID AS VEH_ID,
  v.VEH_MAKE AS VEH_MAKE,
  v.VEH_MODEL AS VEH_MODEL,
  v.VEH_PLATE AS VEH_PLATE
FROM ((((Appian.EFM_USER u
JOIN Appian.EFM_TRIP t
  ON ((t.USER_ID = u.USER_ID)))
JOIN Appian.EFM_LOCATION fl
  ON ((t.FROM_LOC_ID = fl.LOC_ID)))
JOIN Appian.EFM_LOCATION tl
  ON ((t.TO_LOC_ID = tl.LOC_ID)))
JOIN Appian.EFM_VEHICLE v
  ON ((v.VEH_ID = t.VEH_ID)))
);


CREATE OR REPLACE VIEW EFM_V_VEHICLE AS(
SELECT
  veh.VEH_ID AS id,
  veh.VEH_MAKE AS make,
  veh.VEH_MODEL AS model,
  veh.VEH_YEAR AS year,
  status.VEH_STATUS_DESC AS status,
  fleet.FLEET_NAME AS fleet,
  veh.CREATED_DATETIME AS addedDt,
  veh.VEH_MILEAGE AS mileage,
  metrics.AVG_MPG AS mpg,
  BIGINT_TO_INT(COUNT(trip.USAGE_ID)) AS numTrips,
  BIGINT_TO_INT(CAST(SUM(((to_days((CASE
    WHEN ISNULL(trip.USAGE_CHECK_IN_DT) THEN curdate()
    ELSE trip.USAGE_CHECK_IN_DT
  END)) - to_days(trip.USAGE_CHECK_OUT_DT)) + 1)) AS signed)) AS daysInUse,
  veh.VEH_STATE AS state,
  veh.VEH_PLATE AS plate,
  veh.VEH_NEXT_MAINT_DT AS nextMaintDt,
  veh.VEH_NEXT_MAINT_MILEAGE AS nextMaintMileage,
  vtype.VEC_TYPE_DESC AS type,
  veh.VEH_VIN AS vin,
  veh.VEH_IMG AS image,
  veh.VEH_FLDR_ID AS folderId,
  veh.VEHICLE_ACTIVE_FLG AS activeFlag
FROM (((((Appian.EFM_VEHICLE veh
JOIN Appian.EFM_R_VEH_STATUS status
  ON ((status.VEH_STATUS_ID = veh.VEH_STATUS_ID)))
JOIN Appian.EFM_R_VEH_TYPE vtype
  ON ((vtype.VEC_TYPE_ID = veh.VEH_TYPE_ID)))
JOIN Appian.EFM_FLEET fleet
  ON ((fleet.FLEET_ID = veh.FLEET_ID)))
JOIN Appian.EFM_V_USAGE_METRICS metrics
  ON ((metrics.VEH_ID = veh.VEH_ID)))
LEFT JOIN Appian.EFM_VEHICLE_USAGE trip
  ON (((trip.VEH_ID = veh.VEH_ID)
  AND (trip.USAGE_CHECK_OUT_DT IS NOT NULL))))
GROUP BY veh.VEH_ID
);

CREATE OR REPLACE VIEW EFM_V_VEHICLE_EXPENSES AS(
SELECT
  exp.EXP_ID AS EXP_ID,
  exp.VEH_ID AS VEH_ID,
  exp.MAINT_ID AS MAINT_ID,
  exp.VEH_USAGE_ID AS VEH_USAGE_ID,
  exp.VEH_INC_ID AS VEH_INC_ID,
  exp.EXP_CATEGORY_ID AS EXP_CATEGORY_ID,
  expCat.EXP_CATEGORY_DESC AS EXP_CATEGORY_DESC,
  exp.EXP_DATE AS EXP_DATE,
  exp.EXP_AMOUNT AS EXP_AMOUNT,
  veh.VEH_MAKE AS VEH_MAKE,
  veh.VEH_MODEL AS VEH_MODEL,
  veh.VEH_YEAR AS VEH_YEAR,
  veh.VEH_STATUS_ID AS VEH_STATUS_ID,
  vehStatus.VEH_STATUS_DESC AS VEH_STATUS_DESC,
  veh.FLEET_ID AS FLEET_ID,
  veh.VEH_STATE AS VEH_STATE,
  veh.VEH_TYPE_ID AS VEH_TYPE_ID,
  vehType.VEC_TYPE_DESC AS VEC_TYPE_DESC,
  veh.VEH_VIN AS VEH_VIN,
  fleet.FLEET_NAME AS FLEET_NAME
FROM (((((Appian.EFM_EXPENSE exp
JOIN Appian.EFM_VEHICLE veh
  ON ((exp.VEH_ID = veh.VEH_ID)))
JOIN Appian.EFM_FLEET fleet
  ON ((veh.FLEET_ID = fleet.FLEET_ID)))
JOIN Appian.EFM_R_EXP_CATEGORY expCat
  ON ((exp.EXP_CATEGORY_ID = expCat.EXP_CATEGORY_ID)))
JOIN Appian.EFM_R_VEH_STATUS vehStatus
  ON ((veh.VEH_STATUS_ID = vehStatus.VEH_STATUS_ID)))
JOIN Appian.EFM_R_VEH_TYPE vehType
  ON ((veh.VEH_TYPE_ID = vehType.VEC_TYPE_ID)))
);
